package com.kma.malwarescanner.feature.scan.ui

import android.net.Uri
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.kma.malwarescanner.core.domain.useCase.GetApplicationSourceUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.channels.BufferOverflow
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class ScanViewModel @Inject constructor(
    private val getApplicationSourceUseCase: GetApplicationSourceUseCase
) : ViewModel() {
    private val _state = MutableStateFlow(value = ScanState())

    private val _sourceDirState = MutableSharedFlow<String?>(
        extraBufferCapacity = 1,
        onBufferOverflow = BufferOverflow.DROP_LATEST
    )

    val state: StateFlow<ScanState>
        get() = _state

    val sourceDirState: StateFlow<String?>
        get() = _sourceDirState.stateIn(
            scope = viewModelScope,
            started = SharingStarted.WhileSubscribed(stopTimeoutMillis = 5_000),
            initialValue = null
        )

    fun getApplicationSource(uri: Uri?) {
        viewModelScope.launch {
            if (uri == null) {
                return@launch
            }

            _state.update { state -> state.copy(isLoading = true) }
            val file = getApplicationSourceUseCase(uri = uri)

            delay(timeMillis = 300)
            _state.update { state -> state.copy(isLoading = false) }
            _sourceDirState.tryEmit(value = file?.path.orEmpty())
        }
    }
}
