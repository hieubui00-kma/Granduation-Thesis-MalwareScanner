package com.kma.malwarescanner.feature.scan.ui

import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Scaffold
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.ExperimentalLifecycleComposeApi
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.kma.malwarescanner.feature.scan.R
import com.kma.malwarescanner.feature.scan.ui.component.OpenSharedStorageButton
import com.kma.malwarescanner.feature.scan.ui.component.ScanTopAppBar
import com.kma.malwarescanner.feature.scan.util.APPLICATION_APK
import com.kma.malwarescanner.resources.ui.component.LoadingBox
import com.kma.malwarescanner.resources.ui.theme.MalwareScannerTheme

@Composable
@OptIn(ExperimentalLifecycleComposeApi::class)
fun ScanScreen(
    onBackPressed: () -> Unit,
    navigateToApplicationDetails: (String) -> Unit,
    modifier: Modifier = Modifier,
    viewModel: ScanViewModel = hiltViewModel()
) {
    val state by viewModel.state.collectAsStateWithLifecycle()
    val sourceDir by viewModel.sourceDirState.collectAsStateWithLifecycle()
    val launcher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.OpenDocument(),
        onResult = viewModel::getApplicationSource
    )

    LaunchedEffect(key1 = sourceDir) {
        if (sourceDir != null) {
            navigateToApplicationDetails(sourceDir.orEmpty())
        }
    }

    ScanScreen(
        state = state,
        onBackPressed = onBackPressed,
        onOpenSharedStoragePressed = {
            val types = arrayOf(APPLICATION_APK)

            launcher.launch(types)
        },
        modifier = modifier
    )
}

@Composable
fun ScanScreen(
    state: ScanState,
    onBackPressed: () -> Unit,
    onOpenSharedStoragePressed: () -> Unit,
    modifier: Modifier = Modifier
) {
    Scaffold(
        modifier = modifier.fillMaxSize(),
        topBar = {
            ScanTopAppBar(
                title = stringResource(id = R.string.title_scan),
                onBackPressed = onBackPressed
            )
        }
    ) { paddingValues ->
        when {
            state.isLoading -> LoadingBox(modifier = Modifier.padding(paddingValues = paddingValues))

            else -> Column(
                modifier = modifier
                    .fillMaxSize()
                    .padding(paddingValues = paddingValues)
                    .verticalScroll(state = rememberScrollState()),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.spacedBy(space = 16.dp)
            ) {
                Spacer(modifier = Modifier.weight(weight = 1f))

                Image(
                    painter = painterResource(id = R.drawable.illus_file_searching),
                    contentDescription = null,
                    modifier = Modifier.padding(horizontal = 24.dp)
                )

                Text(
                    text = stringResource(R.string.title_analysis),
                    modifier = Modifier.padding(end = 24.dp, bottom = 16.dp, start = 24.dp),
                    style = MaterialTheme.typography.h5
                )

                Text(
                    text = stringResource(R.string.message_select_an_apk_file),
                    modifier = Modifier.padding(end = 24.dp, bottom = 8.dp, start = 24.dp),
                    textAlign = TextAlign.Center,
                    style = MaterialTheme.typography.body2
                )

                Spacer(modifier = Modifier.weight(weight = 1f))

                OpenSharedStorageButton(
                    onClick = onOpenSharedStoragePressed,
                    modifier = Modifier.padding(end = 16.dp, bottom = 24.dp, start = 16.dp)
                )
            }
        }
    }
}

@Preview
@Composable
private fun DefaultPreview() {
    MalwareScannerTheme {
        ScanScreen(
            state = ScanState(),
            onBackPressed = {},
            onOpenSharedStoragePressed = {}
        )
    }
}
