package com.kma.malwarescanner.feature.home.ui.myapplications

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.kma.malwarescanner.core.domain.useCase.GetInstalledApplicationsUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class MyApplicationsViewModel @Inject constructor(
    private val getInstalledApplicationsUseCase: GetInstalledApplicationsUseCase
) : ViewModel() {
    private val _state = MutableStateFlow(value = MyApplicationsState())

    val state: StateFlow<MyApplicationsState>
        get() = _state

    init {
        getInstalledApplications()
    }

    fun getInstalledApplications() {
        viewModelScope.launch {
            _state.update { state -> state.copy(isLoading = true) }
            val installedApplications = getInstalledApplicationsUseCase()

            delay(timeMillis = 300)
            _state.update { state ->
                state.copy(applications = installedApplications, isLoading = false)
            }
        }
    }
}
