package com.kma.malwarescanner.feature.home.ui.myapplications.installed

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.kma.malwarescanner.core.domain.useCase.GetInstalledApplicationsUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import timber.log.Timber
import javax.inject.Inject

@HiltViewModel
class InstalledApplicationsViewModel @Inject constructor(
    private val getInstalledApplicationsUseCase: GetInstalledApplicationsUseCase
) : ViewModel() {
    private val _state = MutableStateFlow(InstalledApplicationsState())

    val state: StateFlow<InstalledApplicationsState>
        get() = _state

    init {
        fetchApplications()
    }

    fun fetchApplications() {
        viewModelScope.launch {
            Timber.d("Fetch installed applications...")
            _state.update { it.copy(isLoading = true) }
            val installedApplications = getInstalledApplicationsUseCase()

            Timber.d("Fetch installed applications completed.")
            delay(timeMillis = 300)
            _state.update {
                it.copy(
                    applications = installedApplications,
                    isLoading = false
                )
            }
        }
    }
}
