package com.kma.malwarescanner.feature.home.data.receiver

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.rememberUpdatedState
import androidx.compose.ui.platform.LocalContext
import timber.log.Timber

internal const val DATA_SCHEMA_PACKAGE = "package"

@Composable
fun PackageBroadcastReceiver(
    onPackageChanged: (Intent?) -> Unit
) {
    // Grab the current context in this part of the UI tree
    val context = LocalContext.current
    // Safely use the latest onSystemEvent lambda passed to the function
    val packageChangedHandler by rememberUpdatedState(onPackageChanged)

    DisposableEffect(key1 = context) {
        val receiver = object : BroadcastReceiver() {

            override fun onReceive(context: Context?, intent: Intent?) {
                Timber.d("Intent: $intent")
                packageChangedHandler(intent)
            }
        }
        val intentFilter = IntentFilter()
        val actions = listOf(Intent.ACTION_PACKAGE_ADDED, Intent.ACTION_PACKAGE_REMOVED)

        actions.forEach { action -> intentFilter.addAction(action) }
        intentFilter.addDataScheme(DATA_SCHEMA_PACKAGE)
        context.registerReceiver(receiver, intentFilter)
        Timber.d("Registered receiver.")
        // When the effect leaves the Composition, remove the callback
        return@DisposableEffect onDispose {
            context.unregisterReceiver(receiver)
            Timber.d("Unregistered receiver.")
        }
    }
}
