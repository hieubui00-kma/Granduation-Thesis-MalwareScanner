package com.kma.malwarescanner.feature.home.ui.myapplications

import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material.Surface
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.ExperimentalLifecycleComposeApi
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.kma.malwarescanner.core.domain.data.model.Application
import com.kma.malwarescanner.feature.home.ui.myapplications.component.ApplicationList
import com.kma.malwarescanner.feature.home.ui.myapplications.component.LoadingBox
import com.kma.malwarescanner.resources.ui.theme.MalwareScannerTheme

@OptIn(ExperimentalLifecycleComposeApi::class)
@Composable
internal fun MyApplicationsScreen(
    modifier: Modifier = Modifier,
    viewModel: MyApplicationsViewModel = hiltViewModel()
) {
    val state by viewModel.state.collectAsStateWithLifecycle()

    MyApplicationsScreen(
        state = state,
        modifier = modifier
    )
}

@Composable
internal fun MyApplicationsScreen(
    state: MyApplicationsState,
    modifier: Modifier = Modifier
) {
    Surface(modifier = modifier.fillMaxSize()) {
        when {
            state.isLoading -> LoadingBox()

            else -> ApplicationList(
                items = state.applications,
                onItemClick = {}
            )
        }
    }
}

@Preview
@Composable
private fun DefaultPreview() {
    val applications = List(16) {
        Application(
            name = "Malware Scanner $it",
            packageName = "com.kma.malwarescanner.$it",
            version = "1.0.0",
            installDate = null,
            updatedDate = null,
            sourceDir = "",
            permissions = emptyList()
        )
    }

    MalwareScannerTheme {
        MyApplicationsScreen(
            state = MyApplicationsState(
                applications = applications
            )
        )
    }
}

@Preview
@Composable
private fun LoadingPreview() {
    MalwareScannerTheme {
        MyApplicationsScreen(state = MyApplicationsState(isLoading = true))
    }
}
