package com.kma.malwarescanner.feature.home.ui.myapplications

import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.Scaffold
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.ExperimentalLifecycleComposeApi
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.kma.malwarescanner.core.domain.data.model.Application
import com.kma.malwarescanner.feature.home.data.receiver.PackageBroadcastReceiver
import com.kma.malwarescanner.feature.home.ui.myapplications.component.ApplicationList
import com.kma.malwarescanner.feature.home.ui.myapplications.component.ScanApkButton
import com.kma.malwarescanner.resources.ui.component.LoadingBox
import com.kma.malwarescanner.resources.ui.theme.MalwareScannerTheme

@Composable
@OptIn(ExperimentalLifecycleComposeApi::class)
fun MyApplicationsScreen(
    hasChanged: Boolean,
    navigateToApplicationDetails: (String) -> Unit,
    navigateToScan: () -> Unit,
    modifier: Modifier = Modifier,
    viewModel: MyApplicationsViewModel = hiltViewModel()
) {
    val state by viewModel.state.collectAsStateWithLifecycle()

    PackageBroadcastReceiver(onPackageChanged = { viewModel.getInstalledApplications() })

    LaunchedEffect(key1 = hasChanged) {
        if (hasChanged) viewModel.getInstalledApplications()
    }

    MyApplicationsScreen(
        state = state,
        navigateToApplicationDetails = navigateToApplicationDetails,
        navigateToScan = navigateToScan,
        modifier = modifier
    )
}

@Composable
fun MyApplicationsScreen(
    state: MyApplicationsState,
    navigateToApplicationDetails: (String) -> Unit,
    navigateToScan: () -> Unit,
    modifier: Modifier = Modifier
) {
    Scaffold(
        modifier = modifier.fillMaxSize(),
        floatingActionButton = {
            ScanApkButton(onClick = navigateToScan)
        }
    ) { paddingValues ->
        when {
            state.isLoading -> LoadingBox(modifier = Modifier.padding(paddingValues = paddingValues))

            else -> ApplicationList(
                items = state.applications,
                onItemClick = { application -> navigateToApplicationDetails(application.sourceDir) },
                modifier = Modifier.padding(paddingValues = paddingValues)
            )
        }
    }
}

@Preview
@Composable
private fun DefaultPreview() {
    val applications = List(size = 16) { index ->
        Application(
            name = "Malware Scanner $index",
            packageName = "com.kma.malwarescanner.$index",
            version = null,
            installDate = null,
            updatedDate = null,
            sourceDir = "",
            permissions = emptyList(),
            malwareType = null
        )
    }

    MalwareScannerTheme {
        MyApplicationsScreen(
            state = MyApplicationsState(applications = applications),
            navigateToApplicationDetails = {},
            navigateToScan = {}
        )
    }
}

@Preview
@Composable
private fun LoadingPreview() {
    MalwareScannerTheme {
        MyApplicationsScreen(
            state = MyApplicationsState(isLoading = true),
            navigateToApplicationDetails = {},
            navigateToScan = {}
        )
    }
}
