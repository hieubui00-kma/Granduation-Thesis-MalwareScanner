package com.kma.malwarescanner.feature.home.ui.myapplications

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.google.accompanist.pager.ExperimentalPagerApi
import com.google.accompanist.pager.HorizontalPager
import com.google.accompanist.pager.PagerState
import com.google.accompanist.pager.rememberPagerState
import com.kma.malwarescanner.feature.home.R
import com.kma.malwarescanner.feature.home.ui.myapplications.component.tabrow.MyApplicationsTabRow
import com.kma.malwarescanner.feature.home.ui.myapplications.installed.InstalledApplicationsScreen
import com.kma.malwarescanner.feature.home.ui.myapplications.uninstalled.UninstalledApplicationsScreen
import kotlinx.coroutines.launch

@OptIn(ExperimentalPagerApi::class)
@Composable
internal fun MyApplicationsScreen(
    modifier: Modifier = Modifier,
    pagerState: PagerState = rememberPagerState()
) {
    Column(modifier = modifier.fillMaxSize()) {
        val pages = remember { listOf("Installed", "Uninstalled") }
        val scope = rememberCoroutineScope()

        MyApplicationsTabRow(
            selectedTabIndex = pagerState.currentPage,
            tabs = pages,
            onTabClick = { index ->
                scope.launch { pagerState.animateScrollToPage(page = index) }
            },
            modifier = Modifier.padding(top = 16.dp, end = 64.dp, bottom = 8.dp, start = 64.dp),
        )

        HorizontalPager(
            count = pages.size,
            modifier = Modifier.weight(weight = 1f),
            state = pagerState,
        ) { index ->
            when (pages[index]) {
                stringResource(R.string.title_installed) -> InstalledApplicationsScreen()
                stringResource(R.string.title_uninstalled) -> UninstalledApplicationsScreen()
            }
        }
    }
}
