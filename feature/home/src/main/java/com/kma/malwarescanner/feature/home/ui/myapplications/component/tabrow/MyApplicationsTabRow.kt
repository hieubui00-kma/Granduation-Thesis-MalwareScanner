package com.kma.malwarescanner.feature.home.ui.myapplications.component.tabrow

import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.selection.selectableGroup
import androidx.compose.material.Surface
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.SubcomposeLayout
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Constraints
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import com.kma.malwarescanner.resources.ui.theme.MalwareScannerTheme

@Composable
fun MyApplicationsTabRow(
    selectedTabIndex: Int,
    tabs: List<String>,
    onTabClick: (Int) -> Unit,
    modifier: Modifier = Modifier,
    indicator: @Composable (tabPositions: List<TabPosition>) -> Unit = @Composable { tabPositions ->
        MyApplicationsTabIndicator(currentTabPosition = tabPositions[selectedTabIndex])
    }
) {
    Surface(
        modifier = modifier
            .fillMaxWidth()
            .selectableGroup(),
        color = Color.Transparent
    ) {
        SubcomposeLayout(Modifier.fillMaxWidth()) { constraints ->
            val tabRowWidth = constraints.maxWidth
            val tabMeasurables = subcompose(TabSlots.Tabs) {
                tabs.forEachIndexed { index, title ->
                    MyApplicationsTab(
                        isSelected = selectedTabIndex == index,
                        onClick = { onTabClick(index) },
                        title = title
                    )
                }
            }
            val tabCount = tabMeasurables.size
            val tabWidth = (tabRowWidth / tabCount)
            val tabPlaceables = tabMeasurables.map {
                it.measure(constraints.copy(minWidth = tabWidth, maxWidth = tabWidth))
            }
            val tabRowHeight = tabPlaceables.maxByOrNull { it.height }?.height ?: 0
            val tabPositions = List(tabCount) { index ->
                TabPosition(left = tabWidth.toDp() * index, width = tabWidth.toDp())
            }

            layout(tabRowWidth, tabRowHeight) {
                subcompose(TabSlots.Indicator) { indicator(tabPositions) }.forEach { measurable ->
                    measurable
                        .measure(Constraints.fixed(tabRowWidth, tabRowHeight))
                        .placeRelative(x = 0, y = 0)
                }

                tabPlaceables.forEachIndexed { index, placeable ->
                    placeable.placeRelative(x = index * tabWidth, y = 0)
                }
            }
        }
    }
}

private enum class TabSlots {
    Tabs,
    Indicator
}

data class TabPosition internal constructor(
    val left: Dp,

    val width: Dp
)

@Preview(showBackground = true)
@Composable
private fun DefaultPreview() {
    val tabs = listOf("Installed", "Uninstalled")

    MalwareScannerTheme {
        MyApplicationsTabRow(
            selectedTabIndex = 0,
            tabs = tabs,
            onTabClick = {},
            modifier = Modifier.padding(all = 4.dp)
        )
    }
}
