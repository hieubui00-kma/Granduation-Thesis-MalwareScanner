package com.kma.malwarescanner.feature.applicationdetails.ui

import android.app.Activity.RESULT_OK
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts.StartActivityForResult
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.Scaffold
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.ExperimentalLifecycleComposeApi
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.kma.malwarescanner.feature.applicationdetails.ui.component.CenterTopAppBar
import com.kma.malwarescanner.feature.applicationdetails.ui.component.LoadingBox
import com.kma.malwarescanner.feature.applicationdetails.ui.component.UninstallButton
import com.kma.malwarescanner.feature.applicationdetails.ui.component.analyze.AnalyzeSection
import com.kma.malwarescanner.feature.applicationdetails.ui.component.features.featuresSection
import com.kma.malwarescanner.feature.applicationdetails.ui.component.metadata.MetadataState
import com.kma.malwarescanner.feature.applicationdetails.ui.component.metadata.metadataSection
import com.kma.malwarescanner.feature.applicationdetails.util.uninstall
import com.kma.malwarescanner.resources.ui.theme.MalwareScannerTheme
import java.util.Date

@Composable
@OptIn(ExperimentalLifecycleComposeApi::class)
fun ApplicationDetailsScreen(
    onBackPressed: (Boolean) -> Unit,
    modifier: Modifier = Modifier,
    viewModel: ApplicationDetailsViewModel = hiltViewModel()
) {
    val state by viewModel.state.collectAsStateWithLifecycle()
    val launcher = rememberLauncherForActivityResult(
        contract = StartActivityForResult(),
        onResult = { result -> if (result.resultCode == RESULT_OK) onBackPressed(true) }
    )

    ApplicationDetailsScreen(
        state = state,
        onBackPressed = { onBackPressed(false) },
        onUserFeaturesPressed = viewModel::switchUserFeaturesState,
        onPermissionsPressed = viewModel::switchPermissionsState,
        onActivitiesPressed = viewModel::switchActivitiesState,
        onServicesPressed = viewModel::switchServicesState,
        onAnalyzePressed = viewModel::analyze,
        onUninstallPressed = onUninstallPressed@{
            val packageName = state.metadataState.packageName ?: return@onUninstallPressed

            uninstall(packageName = packageName, launcher = launcher, isReturnResult = true)
        },
        modifier = modifier
    )
}

@Composable
fun ApplicationDetailsScreen(
    state: ApplicationDetailsState,
    onBackPressed: () -> Unit,
    onUserFeaturesPressed: () -> Unit,
    onPermissionsPressed: () -> Unit,
    onActivitiesPressed: () -> Unit,
    onServicesPressed: () -> Unit,
    onAnalyzePressed: () -> Unit,
    onUninstallPressed: () -> Unit,
    modifier: Modifier = Modifier
) {
    Scaffold(
        modifier = modifier,
        topBar = {
            CenterTopAppBar(
                title = state.metadataState.name.orEmpty(),
                onBackPressed = onBackPressed
            )
        }
    ) { paddingValues ->
        if (state.isLoading) {
            LoadingBox()
            return@Scaffold
        }

        LazyColumn(
            modifier = Modifier
                .padding(paddingValues = paddingValues)
                .fillMaxSize(),
            contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),
            verticalArrangement = Arrangement.spacedBy(space = 16.dp)
        ) {
            metadataSection(state = state.metadataState)

            featuresSection(
                state = state.featuresState,
                onUserFeaturesPressed = onUserFeaturesPressed,
                onPermissionsPressed = onPermissionsPressed,
                onActivitiesPressed = onActivitiesPressed,
                onServicesPressed = onServicesPressed
            )

            item {
                AnalyzeSection(
                    state = state.analyzeState,
                    onAnalyzePressed = onAnalyzePressed,
                    modifier = Modifier
                        .padding(top = 8.dp)
                        .height(height = 48.dp)
                )
            }

            if (state.metadataState.installDate != null) {
                item {
                    UninstallButton(onClick = onUninstallPressed)
                }
            }
        }
    }
}

@Preview
@Composable
private fun DefaultPreview() {
    val metadataState = MetadataState(
        name = "Malware Scanner",
        packageName = "com.kma.malwarescanner",
        version = "1.0.0",
        size = 24 * 1_024 * 1_024,
        installDate = Date(),
        updatedDate = Date(),
    )

    MalwareScannerTheme {
        ApplicationDetailsScreen(
            state = ApplicationDetailsState(metadataState = metadataState),
            onBackPressed = {},
            onUserFeaturesPressed = {},
            onPermissionsPressed = {},
            onActivitiesPressed = {},
            onServicesPressed = {},
            onAnalyzePressed = {},
            onUninstallPressed = {}
        )
    }
}

@Preview
@Composable
private fun LoadingPreview() {
    MalwareScannerTheme {
        ApplicationDetailsScreen(
            state = ApplicationDetailsState(isLoading = true),
            onBackPressed = {},
            onUserFeaturesPressed = {},
            onPermissionsPressed = {},
            onActivitiesPressed = {},
            onServicesPressed = {},
            onAnalyzePressed = {},
            onUninstallPressed = {}
        )
    }
}
