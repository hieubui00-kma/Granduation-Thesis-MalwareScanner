package com.kma.malwarescanner.feature.applicationdetails.ui

import android.app.Activity.RESULT_OK
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts.StartActivityForResult
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.Scaffold
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.ExperimentalLifecycleComposeApi
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.kma.malwarescanner.core.domain.data.model.Application
import com.kma.malwarescanner.feature.applicationdetails.ui.component.AnalyzeSection
import com.kma.malwarescanner.feature.applicationdetails.ui.component.ApplicationDetailsTopAppBar
import com.kma.malwarescanner.feature.applicationdetails.ui.component.ApplicationInfoCard
import com.kma.malwarescanner.feature.applicationdetails.ui.component.ApplicationMetadataCard
import com.kma.malwarescanner.feature.applicationdetails.ui.component.LoadingBox
import com.kma.malwarescanner.feature.applicationdetails.ui.component.PermissionsCard
import com.kma.malwarescanner.feature.applicationdetails.ui.component.UninstallButton
import com.kma.malwarescanner.feature.applicationdetails.util.uninstall
import com.kma.malwarescanner.resources.ui.theme.MalwareScannerTheme
import java.util.Date

@Composable
@OptIn(ExperimentalLifecycleComposeApi::class)
fun ApplicationDetailsScreen(
    onBackPressed: (Boolean) -> Unit,
    modifier: Modifier = Modifier,
    viewModel: ApplicationDetailsViewModel = hiltViewModel()
) {
    val state by viewModel.state.collectAsStateWithLifecycle()
    val launcher = rememberLauncherForActivityResult(
        contract = StartActivityForResult(),
        onResult = { result -> if (result.resultCode == RESULT_OK) onBackPressed(true) }
    )

    ApplicationDetailsScreen(
        state = state,
        onBackPressed = { onBackPressed(false) },
        onPermissionsPressed = {
            val isExpanded = state.isPermissionsExpanded.not()

            viewModel.setPermissionsCardState(isExpanded = isExpanded)
        },
        onAnalyzePressed = viewModel::analyze,
        onUninstallPressed = onUninstallPressed@{
            val packageName = state.application?.packageName ?: return@onUninstallPressed

            uninstall(packageName = packageName, launcher = launcher, isReturnResult = true)
        },
        modifier = modifier
    )
}

@Composable
fun ApplicationDetailsScreen(
    state: ApplicationDetailsState,
    onBackPressed: () -> Unit,
    onPermissionsPressed: () -> Unit,
    onAnalyzePressed: () -> Unit,
    onUninstallPressed: () -> Unit,
    modifier: Modifier = Modifier
) {
    Scaffold(
        modifier = modifier,
        topBar = {
            ApplicationDetailsTopAppBar(
                title = state.application?.name.orEmpty(),
                onBackPressed = onBackPressed
            )
        }
    ) { padding ->
        if (state.isLoading) {
            LoadingBox()
            return@Scaffold
        }

        Column(
            modifier = Modifier
                .padding(padding)
                .fillMaxSize()
                .verticalScroll(state = rememberScrollState())
        ) {
            ApplicationInfoCard(
                name = state.application?.name.orEmpty(),
                packageName = state.application?.packageName.orEmpty(),
                modifier = Modifier.padding(top = 24.dp, end = 16.dp, start = 16.dp, bottom = 8.dp)
            )

            ApplicationMetadataCard(
                version = state.application?.version,
                size = state.application?.size ?: -1,
                installDate = state.application?.installDate,
                updatedDate = state.application?.updatedDate,
                modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),
            )

            PermissionsCard(
                permissions = state.application?.permissions.orEmpty(),
                isExpanded = state.isPermissionsExpanded,
                onClick = onPermissionsPressed,
                modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)
            )

            AnalyzeSection(
                state = state.analyzeState,
                onAnalyzePressed = onAnalyzePressed,
                modifier = Modifier
                    .padding(all = 16.dp)
                    .height(height = 48.dp)
            )

            if (state.application?.installDate != null) {
                UninstallButton(
                    onClick = onUninstallPressed,
                    modifier = Modifier.padding(end = 16.dp, bottom = 24.dp, start = 16.dp)
                )
            }
        }
    }
}

@Preview
@Composable
private fun DefaultPreview() {
    val application = Application(
        name = "Malware Scanner",
        packageName = "com.kma.malwarescanner",
        version = "1.0.0",
        size = 24 * 1_024 * 1_024,
        installDate = Date(),
        updatedDate = Date(),
        sourceDir = "",
    )

    MalwareScannerTheme {
        ApplicationDetailsScreen(
            state = ApplicationDetailsState(application = application),
            onBackPressed = {},
            onPermissionsPressed = {},
            onAnalyzePressed = {},
            onUninstallPressed = {}
        )
    }
}

@Preview
@Composable
private fun LoadingPreview() {
    MalwareScannerTheme {
        ApplicationDetailsScreen(
            state = ApplicationDetailsState(isLoading = true),
            onBackPressed = {},
            onPermissionsPressed = {},
            onAnalyzePressed = {},
            onUninstallPressed = {}
        )
    }
}
