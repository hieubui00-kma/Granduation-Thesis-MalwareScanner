package com.kma.malwarescanner.feature.applicationdetails.ui

import android.app.Activity.RESULT_OK
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.Scaffold
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import com.kma.malwarescanner.core.domain.data.model.Application
import com.kma.malwarescanner.feature.applicationdetails.ui.component.ApplicationDetailsTopAppBar
import com.kma.malwarescanner.feature.applicationdetails.ui.component.ApplicationInfoCard
import com.kma.malwarescanner.feature.applicationdetails.ui.component.ApplicationMetadataCard
import com.kma.malwarescanner.feature.applicationdetails.ui.component.LoadingBox
import com.kma.malwarescanner.feature.applicationdetails.ui.component.UninstallButton
import com.kma.malwarescanner.feature.applicationdetails.util.uninstall
import com.kma.malwarescanner.resources.ui.theme.MalwareScannerTheme
import java.util.Date

@Composable
fun ApplicationDetailsScreen(
    modifier: Modifier = Modifier,
    onBackPressed: (Boolean) -> Unit,
    viewModel: ApplicationDetailsViewModel = hiltViewModel()
) {
    val state by viewModel.state.collectAsState()
    val launcher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.StartActivityForResult(),
        onResult = { result -> if (result.resultCode == RESULT_OK) onBackPressed(true) }
    )

    ApplicationDetailsScreen(
        state = state,
        onBackPressed = { onBackPressed(false) },
        onUninstallPressed = onUninstallPressed@{
            uninstall(
                packageName = state.application?.packageName ?: return@onUninstallPressed,
                launcher = launcher,
                isReturnResult = true
            )
        },
        modifier = modifier
    )
}

@Composable
fun ApplicationDetailsScreen(
    state: ApplicationDetailsState,
    onBackPressed: () -> Unit,
    onUninstallPressed: () -> Unit,
    modifier: Modifier = Modifier
) {
    Scaffold(
        modifier = modifier,
        topBar = {
            ApplicationDetailsTopAppBar(
                title = state.application?.name.orEmpty(),
                onBackPressed = onBackPressed
            )
        }
    ) { padding ->
        when {
            state.isLoading -> LoadingBox()

            else -> Column(
                modifier = Modifier
                    .padding(padding)
                    .fillMaxSize()
                    .verticalScroll(state = rememberScrollState()),
                verticalArrangement = Arrangement.spacedBy(space = 16.dp)
            ) {
                ApplicationInfoCard(
                    name = state.application?.name.orEmpty(),
                    packageName = state.application?.packageName.orEmpty(),
                    modifier = Modifier.padding(top = 24.dp, end = 16.dp, start = 16.dp)
                )

                ApplicationMetadataCard(
                    version = state.application?.version,
                    type = state.application?.type,
                    installDate = state.application?.installDate,
                    updatedDate = state.application?.updatedDate,
                    modifier = Modifier.padding(horizontal = 16.dp),
                )

                UninstallButton(
                    onClick = onUninstallPressed,
                    modifier = Modifier.padding(
                        top = 8.dp,
                        end = 16.dp,
                        bottom = 24.dp,
                        start = 16.dp
                    ),
                )
            }
        }
    }
}

@Preview
@Composable
private fun DefaultPreview() {
    val application = Application(
        name = "Malware Scanner",
        packageName = "com.kma.malwarescanner",
        version = "1.0.0",
        installDate = Date(),
        updatedDate = Date(),
        sourceDir = "",
        permissions = emptyList(),
        type = "Benign"
    )

    MalwareScannerTheme {
        ApplicationDetailsScreen(
            state = ApplicationDetailsState(application = application),
            onBackPressed = {},
            onUninstallPressed = {}
        )
    }
}

@Preview
@Composable
private fun LoadingPreview() {
    MalwareScannerTheme {
        ApplicationDetailsScreen(
            state = ApplicationDetailsState(isLoading = true),
            onBackPressed = {},
            onUninstallPressed = {}
        )
    }
}
