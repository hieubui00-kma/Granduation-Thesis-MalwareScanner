package com.kma.malwarescanner.feature.applicationdetails.ui.component

import androidx.compose.animation.AnimatedContent
import androidx.compose.animation.ExperimentalAnimationApi
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material.LinearProgressIndicator
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.kma.malwarescanner.feature.applicationdetails.R
import com.kma.malwarescanner.resources.ui.theme.MalwareScannerTheme

@Composable
@OptIn(ExperimentalAnimationApi::class)
fun AnalyzeSection(
    state: AnalyzeState,
    onAnalyzePressed: () -> Unit,
    modifier: Modifier = Modifier,
    contentAlignment: Alignment = Alignment.Center
) {
    AnimatedContent(
        targetState = state,
        modifier = modifier,
        contentAlignment = contentAlignment
    ) { targetState ->
        when (targetState) {
            is AnalyzeState.Loading -> Column(
                modifier = Modifier.fillMaxSize(),
                verticalArrangement = Arrangement.SpaceEvenly,
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = stringResource(R.string.message_analyzing),
                    style = MaterialTheme.typography.body1
                )

                LinearProgressIndicator(
                    modifier = Modifier
                        .padding(horizontal = 16.dp)
                        .fillMaxWidth()
                )
            }

            is AnalyzeState.Succeed -> MalwareTypeCard(
                malwareType = targetState.malwareType,
                isMalware = targetState.isMalware,
                modifier = Modifier.fillMaxSize()
            )

            else -> AnalyzeButton(
                onClick = onAnalyzePressed,
                modifier = Modifier.fillMaxSize()
            )
        }
    }
}

sealed interface AnalyzeState {
    object Idle : AnalyzeState

    object Loading : AnalyzeState

    data class Succeed(val malwareType: String, val isMalware: Boolean) : AnalyzeState
}

@Preview(showBackground = true)
@Composable
private fun DefaultPreview() {
    MalwareScannerTheme {
        AnalyzeSection(
            state = AnalyzeState.Idle,
            onAnalyzePressed = {},
            modifier = Modifier.height(height = 48.dp)
        )
    }
}

@Preview(showBackground = true)
@Composable
private fun LoadingPreview() {
    MalwareScannerTheme {
        AnalyzeSection(
            state = AnalyzeState.Loading,
            onAnalyzePressed = {},
            modifier = Modifier.height(height = 48.dp)
        )
    }
}

@Preview(showBackground = true)
@Composable
private fun BenignPreview() {
    MalwareScannerTheme {
        AnalyzeSection(
            state = AnalyzeState.Succeed(malwareType = "Benign", isMalware = false),
            onAnalyzePressed = {},
            modifier = Modifier.height(height = 48.dp)
        )
    }
}

@Preview(showBackground = true)
@Composable
private fun MalwarePreview() {
    MalwareScannerTheme {
        AnalyzeSection(
            state = AnalyzeState.Succeed(malwareType = "Riskware", isMalware = true),
            onAnalyzePressed = {},
            modifier = Modifier.height(height = 48.dp)
        )
    }
}
