package com.kma.malwarescanner.feature.applicationdetails.ui.component

import androidx.compose.animation.animateContentSize
import androidx.compose.animation.core.FiniteAnimationSpec
import androidx.compose.animation.core.spring
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material.Card
import androidx.compose.material.ExperimentalMaterialApi
import androidx.compose.material.Icon
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Text
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.KeyboardArrowDown
import androidx.compose.material.icons.filled.KeyboardArrowLeft
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Shape
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.IntSize
import androidx.compose.ui.unit.dp
import com.kma.malwarescanner.feature.applicationdetails.R
import com.kma.malwarescanner.resources.ui.theme.MalwareScannerTheme

@Composable
@OptIn(ExperimentalMaterialApi::class)
fun ExpandableCard(
    title: String,
    isExpanded: Boolean,
    onClick: () -> Unit,
    modifier: Modifier = Modifier,
    shape: Shape = MaterialTheme.shapes.small,
    elevation: Dp = 8.dp,
    contentPadding: PaddingValues = PaddingValues(all = 16.dp),
    animationSpec: FiniteAnimationSpec<IntSize> = spring(),
    content: @Composable () -> Unit
) {
    Card(
        onClick = onClick,
        modifier = modifier,
        shape = shape,
        elevation = elevation
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(paddingValues = contentPadding)
                .animateContentSize(animationSpec = animationSpec),
            verticalArrangement = Arrangement.spacedBy(space = 8.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                val arrow = remember(key1 = isExpanded) {
                    if (isExpanded) Icons.Filled.KeyboardArrowDown else Icons.Filled.KeyboardArrowLeft
                }

                Text(
                    text = title,
                    fontWeight = FontWeight.Medium,
                    style = MaterialTheme.typography.body1
                )

                Icon(
                    imageVector = arrow,
                    contentDescription = null
                )
            }

            if (isExpanded) {
                content()
            }
        }
    }
}

@Preview
@Composable
private fun DefaultPreview() {
    MalwareScannerTheme {
        ExpandableCard(
            title = stringResource(R.string.label_permissions),
            isExpanded = false,
            onClick = {},
            content = {}
        )
    }
}

@Preview
@Composable
private fun ExpandedPreview() {
    MalwareScannerTheme {
        val permissions = List(size = 5) { "android.permission.INTERNET" }

        ExpandableCard(
            title = stringResource(R.string.label_permissions),
            isExpanded = true,
            onClick = {}
        ) {
            Column(
                modifier = Modifier.fillMaxWidth(),
                verticalArrangement = Arrangement.spacedBy(space = 2.dp)
            ) {
                permissions.forEach { permission ->
                    Text(
                        text = "- $permission",
                        overflow = TextOverflow.Ellipsis,
                        maxLines = 1,
                        style = MaterialTheme.typography.body2
                    )
                }
            }
        }
    }
}
