package com.kma.malwarescanner.feature.applicationdetails.ui

import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.kma.malwarescanner.core.domain.useCase.GetApplicationMalwareTypeUseCase
import com.kma.malwarescanner.core.domain.useCase.GetApplicationUseCase
import com.kma.malwarescanner.feature.applicationdetails.ui.component.AnalyzeState
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import java.io.File
import javax.inject.Inject

@HiltViewModel
class ApplicationDetailsViewModel @Inject constructor(
    savedStateHandle: SavedStateHandle,

    private val getApplicationUseCase: GetApplicationUseCase,

    private val getApplicationMalwareTypeUseCase: GetApplicationMalwareTypeUseCase
) : ViewModel() {
    private val sourceDir = savedStateHandle.get<String>(ARGUMENT_SOURCE_DIR)

    private val isFromSharedStorage = savedStateHandle.get<Boolean>(ARGUMENT_FROM_SHARED_STORAGE) ?: false

    private val _state = MutableStateFlow(value = ApplicationDetailsState())

    val state: StateFlow<ApplicationDetailsState>
        get() = _state

    init {
        getApplicationDetails(sourceDir = sourceDir)
    }

    private fun getApplicationDetails(sourceDir: String?) {
        viewModelScope.launch {
            if (sourceDir.isNullOrEmpty()) {
                return@launch
            }

            _state.update { state -> state.copy(isLoading = true) }
            val application = getApplicationUseCase(sourceDir = sourceDir)

            delay(timeMillis = 400)
            _state.update { state ->
                state.copy(
                    application = application,
                    featuresState = state.featuresState.copy(
                        userFeatures = application?.userFeatures.orEmpty(),
                        permissions = application?.permissions.orEmpty(),
                    ),
                    isLoading = false
                )
            }
        }
    }

    fun analyze() {
        viewModelScope.launch {
            val sourceDir = state.value.application?.sourceDir

            if (sourceDir.isNullOrEmpty()) {
                return@launch
            }

            _state.update { state -> state.copy(analyzeState = AnalyzeState.Loading) }
            val malwareType = getApplicationMalwareTypeUseCase(sourceDir = sourceDir)

            _state.update { state ->
                if (malwareType.isNullOrEmpty()) {
                    return@update state.copy(analyzeState = AnalyzeState.Idle)
                }

                return@update state.copy(
                    analyzeState = AnalyzeState.Succeed(
                        malwareType = malwareType,
                        isMalware = malwareType != MALWARE_TYPE_BENIGN
                    )
                )
            }
        }
    }

    fun switchUserFeaturesState() {
        viewModelScope.launch {
            val isExpanded = _state.value.featuresState.isUserFeaturesExpanded

            _state.update { state ->
                state.copy(
                    featuresState = state.featuresState.copy(
                        isUserFeaturesExpanded = isExpanded.not()
                    )
                )
            }
        }
    }

    fun switchPermissionsState() {
        viewModelScope.launch {
            val isExpanded = _state.value.featuresState.isPermissionsExpanded

            _state.update { state ->
                state.copy(
                    featuresState = state.featuresState.copy(
                        isPermissionsExpanded = isExpanded.not()
                    )
                )
            }
        }
    }

    override fun onCleared() {
        super.onCleared()
        clearCache()
    }

    private fun clearCache() {
        val path = sourceDir ?: return

        if (isFromSharedStorage) {
            File(path).delete()
        }
    }

    companion object {
        const val ARGUMENT_SOURCE_DIR = "sourceDir"
        const val ARGUMENT_FROM_SHARED_STORAGE = "isFromSharedStorage"

        private const val MALWARE_TYPE_BENIGN = "Benign"
    }
}
