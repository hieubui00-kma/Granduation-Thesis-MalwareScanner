package com.kma.malwarescanner.feature.applicationdetails.ui

import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.kma.malwarescanner.core.domain.useCase.GetApplicationUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import java.io.File
import javax.inject.Inject

const val ARGUMENT_SOURCE_DIR = "sourceDir"
const val ARGUMENT_FROM_SHARED_STORAGE = "isFromSharedStorage"

@HiltViewModel
class ApplicationDetailsViewModel @Inject constructor(
    savedStateHandle: SavedStateHandle,

    private val getApplicationUseCase: GetApplicationUseCase
) : ViewModel() {
    private val sourceDir = savedStateHandle.get<String>(ARGUMENT_SOURCE_DIR)

    private val isFromSharedStorage = savedStateHandle.get<Boolean>(ARGUMENT_FROM_SHARED_STORAGE) ?: false

    private val _state = MutableStateFlow(ApplicationDetailsState())

    val state: StateFlow<ApplicationDetailsState>
        get() = _state

    init {
        getApplicationDetails(sourceDir = sourceDir)
    }

    private fun getApplicationDetails(sourceDir: String?) {
        viewModelScope.launch {
            if (sourceDir.isNullOrEmpty()) {
                return@launch
            }

            _state.update { state -> state.copy(isLoading = true) }
            val application = getApplicationUseCase(sourceDir = sourceDir)

            delay(timeMillis = 400)
            _state.update { state -> state.copy(application = application, isLoading = false) }
        }
    }

    override fun onCleared() {
        super.onCleared()
        clearCache()
    }

    private fun clearCache() {
        val path = sourceDir ?: return

        if (isFromSharedStorage) {
            File(path).delete()
        }
    }
}
