package com.kma.malwarescanner.feature.applicationdetails.ui

import android.net.Uri
import androidx.core.net.toUri
import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.kma.malwarescanner.core.domain.useCase.GetApplicationUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import javax.inject.Inject

const val ARGUMENT_PACKAGE_NAME = "packageName"
const val ARGUMENT_URI = "uri"

@HiltViewModel
class ApplicationDetailsViewModel @Inject constructor(
    savedStateHandle: SavedStateHandle,

    private val getApplicationUseCase: GetApplicationUseCase
) : ViewModel() {
    private val _state = MutableStateFlow(ApplicationDetailsState())

    val state: StateFlow<ApplicationDetailsState>
        get() = _state

    init {
        val packageName = savedStateHandle.get<String>(ARGUMENT_PACKAGE_NAME).orEmpty()
        val uri = savedStateHandle.get<String>(ARGUMENT_URI)?.toUri()

        getApplicationDetails(packageName = packageName, uri = uri)
    }

    private fun getApplicationDetails(packageName: String?, uri: Uri?) {
        viewModelScope.launch {
            _state.update { it.copy(isLoading = true) }
            val application = when {
                packageName?.isNotEmpty() == true -> getApplicationUseCase(packageName = packageName)
                uri != null -> getApplicationUseCase(uri = uri)
                else -> return@launch
            }

            delay(timeMillis = 400)
            _state.update { state -> state.copy(application = application, isLoading = false) }
        }
    }
}
