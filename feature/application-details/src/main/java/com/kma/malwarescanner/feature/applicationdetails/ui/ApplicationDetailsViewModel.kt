package com.kma.malwarescanner.feature.applicationdetails.ui

import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.kma.malwarescanner.core.domain.useCase.GetApplicationUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import timber.log.Timber
import javax.inject.Inject

const val ARGUMENT_PACKAGE_NAME = "packageName"

@HiltViewModel
class ApplicationDetailsViewModel @Inject constructor(
    savedStateHandle: SavedStateHandle,

    private val getApplicationUseCase: GetApplicationUseCase
) : ViewModel() {
    private val _state = MutableStateFlow(ApplicationDetailsState())

    val state: StateFlow<ApplicationDetailsState>
        get() = _state

    init {
        val packageName = savedStateHandle.get<String>(ARGUMENT_PACKAGE_NAME).orEmpty()

        getApplicationDetails(packageName)
    }

    private fun getApplicationDetails(packageName: String) {
        viewModelScope.launch {
            Timber.d("Fetch application details...")
            _state.update { it.copy(isLoading = true) }
            val application = getApplicationUseCase(packageName = packageName)

            Timber.d("Fetch application details completed.")
            delay(timeMillis = 400)
            _state.update {
                it.copy(
                    application = application,
                    isLoading = false
                )
            }
        }
    }
}
