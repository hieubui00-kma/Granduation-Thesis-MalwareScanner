package com.kma.apktool

import com.kma.apktool.data.model.ApkMetadata
import net.dongliu.apk.parser.parser.XmlStreamer
import net.dongliu.apk.parser.struct.xml.XmlCData
import net.dongliu.apk.parser.struct.xml.XmlNamespaceEndTag
import net.dongliu.apk.parser.struct.xml.XmlNamespaceStartTag
import net.dongliu.apk.parser.struct.xml.XmlNodeEndTag
import net.dongliu.apk.parser.struct.xml.XmlNodeStartTag

class MetadataTranslator : XmlStreamer {
    private val builder by lazy { ApkMetadata.Builder() }

    val metadata by lazy { builder.build() }

    override fun onStartTag(xmlNodeStartTag: XmlNodeStartTag?) {
        val name = xmlNodeStartTag?.name ?: return
        val attributes by lazy { xmlNodeStartTag.attributes }
        val attributesName by lazy { attributes.getString("name") }

        when (name) {
            "activity" -> builder.activities += attributesName

            "service" -> builder.services += attributesName

            "receiver" -> builder.receivers += attributesName

            "provider" -> builder.providers += attributesName

            "uses-permission" -> builder.permissions += attributesName

            "uses-features" -> builder.userFeatures += attributesName

            "manifest" -> builder.apply {
                this.versionCode = attributes.getString("versionCode")
                this.versionName = attributes.getString("versionName")
                this.packageName = attributes.getString("package")
            }

            "application" -> builder.name = attributes.getString("label")
        }
    }

    override fun onEndTag(xmlNodeEndTag: XmlNodeEndTag?) {
        // Nothing
    }

    override fun onCData(xmlCData: XmlCData?) {
        // Nothing
    }

    override fun onNamespaceStart(tag: XmlNamespaceStartTag?) {
        // Nothing
    }

    override fun onNamespaceEnd(tag: XmlNamespaceEndTag?) {
        // Nothing
    }
}
