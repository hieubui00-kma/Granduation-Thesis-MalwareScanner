package com.kma.apkextractor

import java.io.File
import com.kma.apkextractor.data.model.Method
import kotlinx.coroutines.FlowPreview
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.asFlow
import kotlinx.coroutines.flow.filter
import kotlinx.coroutines.flow.flatMapConcat
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.flow.toList

class ApkExtractor(
    private val apk: File,

    private val cacheStorage: File
) {
    private val File.isSmali: Boolean
        get() = isFile && extension.equals(other = "smali", ignoreCase = true)

    private val File.contentStream: Flow<String>
        get() = bufferedReader()
            .use { reader -> reader.readLines() }
            .asFlow()

    private val String.isCommand: Boolean
        get() = COMMAND_KEYS.any { key -> contains(other = key, ignoreCase = true) }

    @OptIn(FlowPreview::class)
    suspend fun extract(): Map<String, Int> {
        val output = disassemble()
        val result = output.walkTopDown()  // Get all file in the folder
            .asFlow()
            .filter { file -> file.isSmali }
            .flatMapConcat { file -> file.contentStream }   // Emit all the content of file as lines
            .filter { line -> line.isCommand }
            .map { line -> line.asMethod() }
            .filter { method -> method.name != "<init>" }   // Ignore init method
            .toList()
            .groupingBy { method -> "${method.packageName}.${method.className}.${method.name}" }
            .eachCount()    // Count all the repeat of method
            .entries
            .associate { entry -> entry.key to entry.value }

        output.deleteRecursively()     // Clear cache
        return result
    }

    private suspend fun disassemble(): File {
        val storage = File(cacheStorage, apk.nameWithoutExtension)

        storage.deleteRecursively()
        storage.mkdirs()
        disassemble(apk = apk, storage = storage)
        return storage
    }

    private fun String.asMethod(): Method {
        val data = split(" ")
            .last()
            .split(";->")
        val kClass = data[0].split("/")
        val className = kClass.last()
        val packageName = (kClass - className)
            .joinToString(separator = ".") { packageName -> packageName }
            .drop(n = 1)
        val method = data
            .getOrNull(index = 1)
            ?.split("(")
            ?.firstOrNull()
            .orEmpty()

        return Method(
            packageName = packageName,
            className = className,
            name = method
        )
    }

    companion object {
        private val COMMAND_KEYS = arrayOf("invoke-", "invoke-virtual", "invoke-direct")
    }
}
