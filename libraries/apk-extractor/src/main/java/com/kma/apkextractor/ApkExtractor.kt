package com.kma.apkextractor

import com.kma.apkextractor.data.model.isInitialize
import com.kma.apkextractor.util.asMethod
import com.kma.apkextractor.util.contentStream
import com.kma.apkextractor.util.disassemble
import com.kma.apkextractor.util.isCommand
import com.kma.apkextractor.util.isSmali
import kotlinx.coroutines.FlowPreview
import kotlinx.coroutines.flow.asFlow
import kotlinx.coroutines.flow.filter
import kotlinx.coroutines.flow.filterNot
import kotlinx.coroutines.flow.flatMapConcat
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.flow.toList
import java.io.File

class ApkExtractor {

    @OptIn(FlowPreview::class)
    suspend fun extract(apk: File, storage: File): Map<String, Int> {
        val outDir = disassemble(apk = apk, storage = storage)
        val result = outDir.walkTopDown() // Get all file in the folder
            .asFlow()
            .filter { file -> file.isSmali }
            .flatMapConcat { file -> file.contentStream } // Emit all the content of file as lines
            .filter { line -> line.isCommand }
            .map { line -> line.asMethod() }
            .filterNot { method -> method.isInitialize } // Ignore init method
            .toList()
            .groupingBy { method -> "${method.packageName}.${method.className}.${method.name}" }
            .eachCount() // Count all the repeat of method
            .entries
            .associate { entry -> entry.key to entry.value }

        outDir.deleteRecursively() // Clear cache
        return result
    }

    private suspend fun disassemble(apk: File, storage: File): File {
        val outDir = File(storage, apk.nameWithoutExtension)

        outDir.deleteRecursively()
        outDir.mkdirs()
        apk.disassemble(outDir = outDir)
        return outDir
    }
}
