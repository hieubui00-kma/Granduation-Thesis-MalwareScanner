package com.kma.apkextractor

import kotlinx.coroutines.async
import kotlinx.coroutines.awaitAll
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.flow.asFlow
import kotlinx.coroutines.flow.filter
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.flow.toList
import org.jf.baksmali.Baksmali
import org.jf.baksmali.BaksmaliOptions
import org.jf.dexlib2.DexFileFactory
import org.jf.dexlib2.Opcodes
import org.jf.dexlib2.analysis.InlineMethodResolver
import org.jf.dexlib2.dexbacked.DexBackedDexFile
import org.jf.dexlib2.dexbacked.DexBackedOdexFile
import org.jf.dexlib2.iface.MultiDexContainer
import java.io.File
import java.io.FileNotFoundException

private const val MAX_PROCESSOR = 6

suspend fun disassemble(apk: File, storage: File) = coroutineScope {
    if (apk.isFile.not() || apk.canRead().not()) {
        throw FileNotFoundException("${apk.name} is not file or can't readable.")
    }

    val opcodes = Opcodes.forApi(0)
    val container = DexFileFactory.loadDexContainer(apk, opcodes)

    container.dexEntryNames
        .asFlow()
        .map { name -> container.getEntry(name) }
        .filter { entry -> entry != null }
        .map { entry -> async { entry?.disassemble(storage = storage) } }
        .toList()
        .awaitAll()
}

fun MultiDexContainer.DexEntry<out DexBackedDexFile>.disassemble(storage: File) {
    val name = entryName.substring(startIndex = 0, endIndex = entryName.indexOf("."))
    val folder = File(storage, name)
    val dexFile = dexFile
    val options = BaksmaliOptions().apply {
        deodex = false
        implicitReferences = false
        parameterRegisters = true
        localsDirective = true
        sequentialLabels = true
        debugInfo = BuildConfig.DEBUG
        codeOffsets = false
        accessorComments = false
        registerInfo = 0
        inlineResolver = null
    }

    if (this is DexBackedOdexFile) {
        options.inlineResolver = InlineMethodResolver.createInlineMethodResolver(odexVersion)
    }
    Baksmali.disassembleDexFile(dexFile, folder, MAX_PROCESSOR, options)
}
