package com.kma.malwarescanner.core.data.remote.source

import com.kma.malwarescanner.core.data.remote.request.KSecurityService
import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.withContext
import timber.log.Timber
import javax.inject.Inject
import javax.inject.Named

class TensorInputRemoteDataSource @Inject constructor(
    private val kSecurityService: KSecurityService,

    @Named("io")
    private val ioDispatcher: CoroutineDispatcher
) {

    suspend fun getTensorModelInput(
        tensorModelId: String
    ): List<String> = withContext(context = ioDispatcher) {
        val response = runCatching { kSecurityService.getTensorModelInput(tensorModelId = tensorModelId) }
            .onFailure { exception -> Timber.e(message = exception.message) }
            .getOrNull()

        return@withContext response?.data.orEmpty()
    }
}
