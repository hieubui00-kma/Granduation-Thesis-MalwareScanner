package com.kma.malwarescanner.core.data.local

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.TypeConverters
import com.kma.malwarescanner.core.data.local.dao.TensorInputDao
import com.kma.malwarescanner.core.data.local.dao.TensorModelDao
import com.kma.malwarescanner.core.data.local.dao.TensorOutputDao
import com.kma.malwarescanner.core.data.local.entity.TensorInputEntity
import com.kma.malwarescanner.core.data.local.entity.TensorModelEntity
import com.kma.malwarescanner.core.data.local.entity.TensorOutputEntity
import com.kma.malwarescanner.core.data.util.DateConverter

@Database(
    entities = [
        TensorModelEntity::class,
        TensorInputEntity::class,
        TensorOutputEntity::class
    ],
    version = 1,
    exportSchema = false
)
@TypeConverters(DateConverter::class)
abstract class MalwareScannerDatabase internal constructor() : RoomDatabase() {

    abstract fun getTensorModelDao(): TensorModelDao

    abstract fun getTensorInputDao(): TensorInputDao

    abstract fun getTensorOutputDao(): TensorOutputDao

    companion object {
        private const val DATABASE_NAME = "malwarescanner"

        private lateinit var INSTANCE: MalwareScannerDatabase

        fun getInstance(context: Context): MalwareScannerDatabase {
            if (this::INSTANCE.isInitialized) {
                return INSTANCE
            }

            val klass = MalwareScannerDatabase::class.java

            INSTANCE = Room
                .databaseBuilder(context = context, klass = klass, name = DATABASE_NAME)
                .build()
            return INSTANCE
        }
    }
}
