package com.kma.malwarescanner.core.data.worker

import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.os.Build.VERSION.SDK_INT
import android.os.Build.VERSION_CODES
import androidx.annotation.RequiresApi
import androidx.core.app.NotificationCompat
import androidx.hilt.work.HiltWorker
import androidx.work.CoroutineWorker
import androidx.work.ForegroundInfo
import androidx.work.WorkerParameters
import com.kma.malwarescanner.core.data.R
import dagger.assisted.Assisted
import dagger.assisted.AssistedInject
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.withContext
import timber.log.Timber

@HiltWorker
class ReportAnalysisWorker @AssistedInject constructor(
    @Assisted context: Context,

    @Assisted parameters: WorkerParameters
) : CoroutineWorker(context, parameters) {
    private val notificationBuilder: NotificationCompat.Builder
        get() {
            val title = applicationContext.getString(R.string.title_report_analysis)

            return NotificationCompat
                .Builder(applicationContext, REPORT_ANALYSIS_CHANNEL_ID)
                .setSmallIcon(R.drawable.ic_analytics)
                .setContentTitle(title)
                .setProgress(100, 0, true)
                .setPriority(NotificationManager.IMPORTANCE_LOW)
                .setOngoing(true)
        }

    override suspend fun doWork(): Result = withContext(context = Dispatchers.Default) {
        val notification = notificationBuilder.build()
        val foreground = ForegroundInfo(REPORT_ANALYSIS_NOTIFICATION_ID, notification)

        if (SDK_INT >= VERSION_CODES.O) {
            createNotificationChannel()
        }

        setForeground(foreground)
        report()
        return@withContext Result.success()
    }

    @RequiresApi(VERSION_CODES.O)
    private fun createNotificationChannel() {
        val systemService = applicationContext.getSystemService(Context.NOTIFICATION_SERVICE)
        val notificationManager = systemService as NotificationManager
        val name = applicationContext.getString(R.string.title_report_analysis)
        val importance = NotificationManager.IMPORTANCE_LOW
        val channel = NotificationChannel(REPORT_ANALYSIS_CHANNEL_ID, name, importance)

        channel.setShowBadge(false)
        notificationManager.createNotificationChannel(channel)
    }

    private suspend fun report() = withContext(context = Dispatchers.IO) {
        repeat(times = 101) { progress ->
            Timber.d("progress: ${progress.toFloat()}")
            delay(timeMillis = 500)
        }
    }

    companion object {
        private const val REPORT_ANALYSIS_CHANNEL_ID = "report_analysis"
        private const val REPORT_ANALYSIS_NOTIFICATION_ID = 0x1000
    }
}
