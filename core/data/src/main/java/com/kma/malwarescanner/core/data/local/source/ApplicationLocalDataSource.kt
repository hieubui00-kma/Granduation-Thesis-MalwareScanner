package com.kma.malwarescanner.core.data.local.source

import android.content.pm.ApplicationInfo
import android.content.pm.ApplicationInfo.FLAG_SYSTEM
import android.content.pm.ApplicationInfo.FLAG_UPDATED_SYSTEM_APP
import android.content.pm.PackageManager
import android.content.pm.PackageManager.GET_META_DATA
import android.content.pm.PackageManager.GET_PERMISSIONS
import android.content.pm.PackageManager.GET_RECEIVERS
import android.content.pm.PackageManager.GET_SERVICES
import com.kma.malwarescanner.core.domain.data.model.Application
import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.flow.asFlow
import kotlinx.coroutines.flow.filterNot
import kotlinx.coroutines.flow.flowOn
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.flow.toList
import kotlinx.coroutines.withContext
import java.util.Date
import javax.inject.Inject
import javax.inject.Named

class ApplicationLocalDataSource @Inject constructor(
    private val packageManager: PackageManager,

    @Named("default")
    private val defaultDispatcher: CoroutineDispatcher
) {

    @Suppress("DEPRECATION")
    suspend fun getInstalledApplication(): List<Application> = packageManager
        .getInstalledApplications(GET_META_DATA)
        .asFlow()
        .filterNot { it.isSystemApplication }
        .map { applicationInfo -> applicationInfo.asModel() }
        .flowOn(defaultDispatcher)
        .toList()

    private val ApplicationInfo.isSystemApplication: Boolean
        get() = flags and FLAG_SYSTEM == 1 && flags and FLAG_UPDATED_SYSTEM_APP == 1

    @Suppress("DEPRECATION")
    private fun ApplicationInfo.asModel(): Application {
        val flags = GET_PERMISSIONS or GET_SERVICES or GET_RECEIVERS
        val name = packageManager.getApplicationLabel(this).toString()
        val packageInfo = packageManager.getPackageInfo(this.packageName, flags)
        val sourceDir = metaData.getString(METADATA_SOURCE_DIR).orEmpty()
        val permissions = packageInfo.requestedPermissions?.toList() ?: emptyList()

        return Application(
            name = name,
            packageName = packageName,
            version = packageInfo.versionName,
            installDate = Date(packageInfo.firstInstallTime),
            updatedDate = Date(packageInfo.lastUpdateTime),
            sourceDir = sourceDir,
            permissions = permissions
        )
    }

    @Suppress("DEPRECATION")
    suspend fun getApplication(packageName: String): Application? = withContext(defaultDispatcher) {
        packageManager
            .getApplicationInfo(packageName, GET_META_DATA)
            .takeUnless { it.isSystemApplication }
            ?.asModel()
    }

    companion object {
        private const val METADATA_SOURCE_DIR = "sourceDir"
    }
}
