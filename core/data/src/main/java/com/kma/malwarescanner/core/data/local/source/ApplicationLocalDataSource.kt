package com.kma.malwarescanner.core.data.local.source

import android.content.pm.PackageManager
import android.content.pm.PackageManager.GET_META_DATA
import android.content.pm.PackageManager.GET_PERMISSIONS
import android.content.pm.PackageManager.GET_RECEIVERS
import android.content.pm.PackageManager.GET_SERVICES
import com.kma.malwarescanner.core.data.local.model.asModel
import com.kma.malwarescanner.core.data.local.model.isSystemApplication
import com.kma.malwarescanner.core.data.util.ApplicationClassifier
import com.kma.malwarescanner.core.domain.data.model.Application
import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.withContext
import javax.inject.Inject
import javax.inject.Named

class ApplicationLocalDataSource @Inject constructor(
    private val packageManager: PackageManager,

    private val applicationClassifier: ApplicationClassifier,

    @Named("io")
    private val ioDispatcher: CoroutineDispatcher
) {

    @Suppress("DEPRECATION")
    suspend fun getInstalledApplications(): List<Application> = withContext(ioDispatcher) {
        packageManager
            .getInstalledApplications(GET_META_DATA)
            .filterNot { it.isSystemApplication }
            .map { applicationInfo ->
                val name = packageManager.getApplicationLabel(applicationInfo).toString()

                return@map applicationInfo.asModel(name = name)
            }
    }

    @Suppress("DEPRECATION")
    suspend fun getApplication(packageName: String): Application? = withContext(ioDispatcher) {
        val applicationInfo = packageManager
            .getApplicationInfo(packageName, GET_META_DATA)
            .takeUnless { it.isSystemApplication }
            ?: return@withContext null
        val flags = GET_PERMISSIONS or GET_SERVICES or GET_RECEIVERS
        val name = packageManager.getApplicationLabel(applicationInfo).toString()
        val application = packageManager
            .getPackageInfo(applicationInfo.packageName, flags)
            .asModel(name = name)
        val type = applicationClassifier.classify(application).firstOrNull()

        return@withContext application.copy(type = type)
    }
}
