package com.kma.malwarescanner.core.data.repository

import android.content.res.AssetManager
import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.withContext
import org.tensorflow.lite.Interpreter
import java.io.FileInputStream
import java.nio.MappedByteBuffer
import java.nio.channels.FileChannel.MapMode
import javax.inject.Inject
import javax.inject.Named

class ModelRepository @Inject constructor(
    private val assetManager: AssetManager,

    @Named("io")
    private val ioDispatcher: CoroutineDispatcher
) {

    suspend fun getClassificationModelByPermission(
        option: Interpreter.Options = Interpreter.Options().setNumThreads(NUMBER_THREADS)
    ): Interpreter {
        val model = getModel(fileName = CLASSIFICATION_MODEL_BY_PERMISSIONS)

        return Interpreter(model, option)
    }

    private suspend fun getModel(fileName: String): MappedByteBuffer = withContext(context = ioDispatcher) {
        val fileDescriptor = assetManager.openFd(fileName)
        val inputStream = FileInputStream(fileDescriptor.fileDescriptor)
        val fileChannel = inputStream.channel
        val startOffset = fileDescriptor.startOffset
        val declaredLength = fileDescriptor.declaredLength

        return@withContext fileChannel.map(MapMode.READ_ONLY, startOffset, declaredLength)
    }

    companion object {
        private const val NUMBER_THREADS = 4

        private const val CLASSIFICATION_MODEL_BY_PERMISSIONS = "models/model.tflite"
    }
}
