package com.kma.malwarescanner.core.data.repository

import android.net.Uri
import com.kma.apktool.ApkFile
import com.kma.malwarescanner.core.data.local.source.ApplicationLocalDataSource
import com.kma.malwarescanner.core.data.model.asModel
import com.kma.malwarescanner.core.domain.data.model.Application
import com.kma.malwarescanner.core.domain.data.repository.ApplicationRepository
import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.async
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.withContext
import java.io.File
import java.util.Date
import javax.inject.Inject
import javax.inject.Named

class ApplicationRepositoryImpl @Inject constructor(
    private val applicationLocalDataSource: ApplicationLocalDataSource,

    private val malwareRepository: MalwareRepository,

    @Named("default")
    private val defaultDispatcher: CoroutineDispatcher
) : ApplicationRepository {

    override suspend fun getInstalledApplications(): List<Application> {
        return applicationLocalDataSource
            .getInstalledApplications()
            .map { applicationInfo ->
                val name = applicationLocalDataSource.getApplicationName(info = applicationInfo)

                return@map applicationInfo.asModel(name = name)
            }
    }

    override suspend fun getApplication(sourceDir: String): Application = coroutineScope {
        val apkFile = ApkFile(path = sourceDir)
        val metadata = withContext(context = defaultDispatcher) { apkFile.apkMeta }
        val installDate = async { getApplicationInstallDate(packageName = metadata.packageName) }
        val updateDate = async { getApplicationUpdateDate(packageName = metadata.packageName) }
        val type = async {
            val permissions = metadata.permissions.map { permission -> permission.name }
            val malwareTypes = malwareRepository.getMalwareTypes(permissions = permissions)

            return@async malwareTypes.firstOrNull()
        }

        return@coroutineScope metadata.asModel(
            sourceDir = sourceDir,
            installDate = installDate.await(),
            updatedDate = updateDate.await(),
            type = type.await()
        )
    }

    private suspend fun getApplicationInstallDate(packageName: String): Date? {
        return applicationLocalDataSource
            .getApplicationInstallTime(packageName = packageName)
            ?.let { installTime -> Date(installTime) }
    }

    private suspend fun getApplicationUpdateDate(packageName: String): Date? {
        return applicationLocalDataSource
            .getApplicationUpdateTime(packageName = packageName)
            ?.let { updateTime -> Date(updateTime) }
    }

    override suspend fun getApplicationSource(uri: Uri): File? {
        return applicationLocalDataSource.getApplicationSource(uri = uri)
    }
}
