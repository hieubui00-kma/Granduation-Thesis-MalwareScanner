package com.kma.malwarescanner.core.data.repository

import com.kma.malwarescanner.core.data.local.source.ApplicationLocalDataSource
import com.kma.malwarescanner.core.data.model.asModel
import com.kma.malwarescanner.core.domain.data.model.Application
import com.kma.malwarescanner.core.domain.data.repository.ApplicationRepository
import kotlinx.coroutines.async
import kotlinx.coroutines.coroutineScope
import javax.inject.Inject

class ApplicationRepositoryImpl @Inject constructor(
    private val applicationLocalDataSource: ApplicationLocalDataSource,

    private val malwareRepository: MalwareRepository
) : ApplicationRepository {

    override suspend fun getInstalledApplications(): List<Application> {
        return applicationLocalDataSource
            .getInstalledApplications()
            .map { applicationInfo ->
                val name = applicationLocalDataSource.getApplicationName(info = applicationInfo)

                return@map applicationInfo.asModel(name = name)
            }
    }

    override suspend fun getUninstalledApplications(): List<Application> {
        return emptyList()
    }

    override suspend fun getApplication(packageName: String): Application? = coroutineScope {
        val packageInfo = applicationLocalDataSource
            .getPackageInfo(packageName = packageName)
            ?: return@coroutineScope null
        val name = async { applicationLocalDataSource.getApplicationName(info = packageInfo.applicationInfo) }
        val type = async { malwareRepository.getMalwareTypes(packageInfo).firstOrNull() }

        return@coroutineScope packageInfo.asModel(name = name.await(), type = type.await())
    }
}
