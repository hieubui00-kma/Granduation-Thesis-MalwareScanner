package com.kma.malwarescanner.core.data.repository

import androidx.work.Constraints
import androidx.work.ExistingPeriodicWorkPolicy
import androidx.work.NetworkType
import androidx.work.PeriodicWorkRequestBuilder
import androidx.work.WorkManager
import com.kma.malwarescanner.core.data.worker.ReportAnalysisWorker
import com.kma.malwarescanner.core.domain.data.repository.AnalysisRepository
import java.util.concurrent.TimeUnit
import javax.inject.Inject

class AnalysisRepositoryImpl @Inject constructor(
    private val workManager: WorkManager
) : AnalysisRepository {

    override suspend fun reportAnalysis() {
        val policy = ExistingPeriodicWorkPolicy.KEEP

        val constraints = Constraints.Builder()
            .setRequiredNetworkType(networkType = NetworkType.CONNECTED)
            .build()
        val request = PeriodicWorkRequestBuilder<ReportAnalysisWorker>(repeatInterval = 7, TimeUnit.DAYS)
            .setConstraints(constraints = constraints)
            .setInitialDelay(duration = 7, timeUnit = TimeUnit.DAYS)
            .build()

        workManager.enqueueUniquePeriodicWork(REPORT_ANALYSIS_WORK_NAME, policy, request)
    }

    companion object {
        private const val REPORT_ANALYSIS_WORK_NAME = "report_analysis"
    }
}
