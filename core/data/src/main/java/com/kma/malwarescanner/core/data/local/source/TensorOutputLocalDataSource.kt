package com.kma.malwarescanner.core.data.local.source

import com.kma.malwarescanner.core.data.local.dao.TensorOutputDao
import com.kma.malwarescanner.core.data.local.entity.TensorOutputEntity
import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.withContext
import javax.inject.Inject
import javax.inject.Named

class TensorOutputLocalDataSource @Inject constructor(
    private val tensorOutputDao: TensorOutputDao,

    @Named("io")
    private val ioDispatcher: CoroutineDispatcher
) {

    suspend fun saveTensorOutput(
        tensorModelId: String,
        tensorOutput: List<String>
    ): Unit = withContext(context = ioDispatcher) {
        val tensorOutputEntities = tensorOutput
            .mapIndexed { index, input -> TensorOutputEntity(id = index, name = input, tensorModelId = tensorModelId) }
            .toTypedArray()

        tensorOutputDao.insert(tensorOutputs = tensorOutputEntities)
    }

    suspend fun getTensorOutput(
        tensorModelId: String
    ): List<TensorOutputEntity> = withContext(context = ioDispatcher) {
        return@withContext tensorOutputDao.findAllByTensorModelId(tensorModelId = tensorModelId)
    }
}
