package com.kma.malwarescanner.core.data.local.source

import com.kma.malwarescanner.core.data.local.dao.TensorModelDao
import com.kma.malwarescanner.core.data.local.entity.TensorModelEntity
import com.kma.malwarescanner.core.data.util.copyTo
import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileNotFoundException
import java.io.InputStream
import java.util.Date
import javax.inject.Inject
import javax.inject.Named

class TensorModelLocalDataSource @Inject constructor(
    private val tensorModelDao: TensorModelDao,

    @Named("files")
    private val filesStorage: File,

    @Named("io")
    private val ioDispatcher: CoroutineDispatcher
) {

    suspend fun saveTensorModel(
        id: String,
        version: String,
        createdAt: Date
    ): TensorModelEntity = withContext(context = ioDispatcher) {
        val tensorModel = TensorModelEntity(id = id, version = version, createdAt = createdAt)

        tensorModelDao.insert(tensorModel = tensorModel)
        return@withContext tensorModel
    }

    suspend fun getTensorModel(
        tensorModelId: String
    ): TensorModelEntity? = withContext(context = ioDispatcher) {
        return@withContext tensorModelDao.findById(tensorModelId = tensorModelId)
    }

    fun getTensorModelSource(name: String): File? {
        return File(filesStorage, name).takeIf { file -> file.exists() }
    }

    suspend fun saveTensorModelSource(
        source: InputStream,
        name: String
    ): File = withContext(context = ioDispatcher) {
        val file = File(filesStorage, name)

        if (file.exists()) {
            throw FileAlreadyExistsException(file)
        }

        source.copyTo(file = file, context = ioDispatcher)
        return@withContext file
    }

    suspend fun deleteTensorModelSource(name: String): Unit = withContext(context = ioDispatcher) {
        getTensorModelSource(name = name)
            ?.delete()
            ?: throw FileNotFoundException("$name couldn't be found!")
    }
}
