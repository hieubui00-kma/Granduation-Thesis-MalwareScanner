package com.kma.malwarescanner.core.data.local.source

import com.kma.malwarescanner.core.data.local.dao.TensorInputDao
import com.kma.malwarescanner.core.data.local.entity.TensorInputEntity
import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.withContext
import javax.inject.Inject
import javax.inject.Named

class TensorInputLocalDataSource @Inject constructor(
    private val tensorInputDao: TensorInputDao,

    @Named("io")
    private val ioDispatcher: CoroutineDispatcher
) {

    suspend fun saveTensorInput(
        tensorModelId: String,
        tensorInput: List<String>
    ): Unit = withContext(context = ioDispatcher) {
        val tensorInputEntities = tensorInput
            .map { input -> TensorInputEntity(name = input, tensorModelId = tensorModelId) }
            .toTypedArray()

        tensorInputDao.insert(tensorInputs = tensorInputEntities)
    }

    suspend fun getTensorInput(
        tensorModelId: String
    ): List<TensorInputEntity> = withContext(context = ioDispatcher) {
        return@withContext tensorInputDao.findAllByTensorModelId(tensorModelId = tensorModelId)
    }

    suspend fun deleteTensorInput(tensorModelId: String): Unit = withContext(context = ioDispatcher) {
        tensorInputDao.deleteByTensorModelId(tensorModelId = tensorModelId)
    }
}
