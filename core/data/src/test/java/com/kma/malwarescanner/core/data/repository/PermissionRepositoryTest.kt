package com.kma.malwarescanner.core.data.repository

import com.kma.malwarescanner.core.data.local.entity.PermissionEntity
import com.kma.malwarescanner.core.data.local.source.PermissionLocalDataSource
import io.mockk.MockKAnnotations
import io.mockk.coEvery
import io.mockk.impl.annotations.MockK
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.runTest
import org.junit.Before
import org.junit.Test

@ExperimentalCoroutinesApi
internal class PermissionRepositoryTest {
    @MockK
    private lateinit var permissionLocalDataSource: PermissionLocalDataSource

    @Before
    fun setUp() {
        MockKAnnotations.init(this@PermissionRepositoryTest)
    }

    @Test
    fun `When permissions data in database is empty then return empty list`() = runTest {
        val permissionRepository = PermissionRepository(permissionLocalDataSource)

        coEvery { permissionLocalDataSource.getPermissions() }.returns(returnValue = emptyList())

        // Test...
        val result = permissionRepository.getPermissions()

        assert(result.isEmpty())
    }

    @Test
    fun `When permissions data in database is not empty then return permissions that have same data`() = runTest {
        val permissionRepository = PermissionRepository(permissionLocalDataSource)
        val mockData = List(size = 10) { index ->
            PermissionEntity(id = index, name = "Permission - $index")
        }

        coEvery { permissionLocalDataSource.getPermissions() }.returns(returnValue = mockData)

        // Test...
        val permissions = permissionRepository.getPermissions()
        val result = permissions.all { permission ->
            mockData.any { data -> data.id == permission.id && data.name == permission.name }
        }

        assert(result)
    }
}
