package com.kma.malwarescanner.core.data.repository

import com.kma.malwarescanner.core.data.local.entity.MalwareTypeEntity
import com.kma.malwarescanner.core.data.local.source.MalwareTypeLocalDataSource
import io.mockk.MockKAnnotations
import io.mockk.coEvery
import io.mockk.impl.annotations.MockK
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.runTest
import org.junit.Before
import org.junit.Test

@ExperimentalCoroutinesApi
internal class MalwareTypeRepositoryTest {
    @MockK
    private lateinit var malwareTypeLocalDataSource: MalwareTypeLocalDataSource

    @Before
    fun setUp() {
        MockKAnnotations.init(this@MalwareTypeRepositoryTest)
    }

    @Test
    fun `When malware types data in database is empty then return empty list`() = runTest {
        val malwareTypeRepository = MalwareTypeRepository(malwareTypeLocalDataSource)

        coEvery { malwareTypeLocalDataSource.getMalwareTypes() }.returns(returnValue = emptyList())

        // Test...
        val result = malwareTypeRepository.getMalwareTypes()

        assert(result.isEmpty())
    }

    @Test
    fun `When malware types data in database is not empty then return malware types that have same data`() = runTest {
        val malwareTypeRepository = MalwareTypeRepository(malwareTypeLocalDataSource)
        val mockData = List(size = 10) { index ->
            MalwareTypeEntity(id = index, name = "Malware Type - $index")
        }

        coEvery { malwareTypeLocalDataSource.getMalwareTypes() }.returns(returnValue = mockData)

        // Test...
        val malwareTypes = malwareTypeRepository.getMalwareTypes()
        val result = malwareTypes.all { malwareType ->
            mockData.any { data -> data.id == malwareType.id && data.name == malwareType.name }
        }

        assert(result)
    }
}
