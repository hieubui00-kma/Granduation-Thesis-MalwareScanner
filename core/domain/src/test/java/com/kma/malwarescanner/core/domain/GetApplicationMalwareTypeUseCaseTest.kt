package com.kma.malwarescanner.core.domain

import com.kma.malwarescanner.core.domain.data.repository.ApplicationRepository
import com.kma.malwarescanner.core.domain.useCase.GetApplicationMalwareTypeUseCase
import io.mockk.MockKAnnotations
import io.mockk.coEvery
import io.mockk.impl.annotations.MockK
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.runTest
import org.junit.Before
import org.junit.Test

@ExperimentalCoroutinesApi
class GetApplicationMalwareTypeUseCaseTest {

    @MockK
    private lateinit var applicationRepository: ApplicationRepository

    @Before
    fun setUp() {
        MockKAnnotations.init(this@GetApplicationMalwareTypeUseCaseTest)
    }

    @Test
    fun `When there is no data associated with the source dir then return NULL`() = runTest {
        val getApplicationMalwareTypeUseCase = GetApplicationMalwareTypeUseCase(applicationRepository)

        coEvery { applicationRepository.getApplicationMalwareType(sourceDir = any()) }.returns(null)

        // Test...
        val result = getApplicationMalwareTypeUseCase(sourceDir = "")

        assert(result == null)
    }

    @Test
    fun `When there is data associated with the source dir then return malware type value`() = runTest {
        val getApplicationMalwareTypeUseCase = GetApplicationMalwareTypeUseCase(applicationRepository)
        val mockData = "Benign"

        coEvery { applicationRepository.getApplicationMalwareType(sourceDir = any()) }.returns(mockData)

        // Test...
        val result = getApplicationMalwareTypeUseCase(sourceDir = "")

        assert(result == mockData)
    }
}
