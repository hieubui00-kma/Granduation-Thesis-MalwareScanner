package com.kma.malwarescanner.core.domain

import com.kma.malwarescanner.core.domain.data.model.Application
import com.kma.malwarescanner.core.domain.data.repository.ApplicationRepository
import com.kma.malwarescanner.core.domain.useCase.GetUninstalledApplicationsUseCase
import io.mockk.MockKAnnotations
import io.mockk.coEvery
import io.mockk.impl.annotations.MockK
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.StandardTestDispatcher
import kotlinx.coroutines.test.runTest
import org.junit.Before
import org.junit.Test

@ExperimentalCoroutinesApi
internal class GetUninstalledApplicationsUseCaseTest {
    @MockK
    private lateinit var applicationRepository: ApplicationRepository

    @Before
    fun setUp() {
        MockKAnnotations.init(this@GetUninstalledApplicationsUseCaseTest)
    }

    @Test
    fun `When not have uninstalled application then return empty list`() = runTest {
        val dispatcher = StandardTestDispatcher(testScheduler)
        val getUninstalledApplicationsUseCase = GetUninstalledApplicationsUseCase(applicationRepository, dispatcher)
        val mockData = emptyList<Application>()

        coEvery { applicationRepository.getUninstalledApplications() }.returns(mockData)

        // Test...
        val result = getUninstalledApplicationsUseCase()

        assert(result.isEmpty())
    }

    @Test
    fun `When have uninstalled applications then return a sorted application list by name`() = runTest {
        val dispatcher = StandardTestDispatcher(testScheduler)
        val getUninstalledApplicationsUseCase = GetUninstalledApplicationsUseCase(applicationRepository, dispatcher)
        val mockData = List(size = 8) {
            Application(
                name = "Malware Scanner - $it",
                packageName = "com.kma.malwarescanner.$it",
                version = null,
                installDate = null,
                updatedDate = null,
                sourceDir = "",
                permissions = emptyList(),
                type = null
            )
        }

        coEvery { applicationRepository.getUninstalledApplications() }.returns(mockData)

        // Test...
        val expected = mockData.sortedBy { application -> application.name }
        val result = getUninstalledApplicationsUseCase()

        assert(result.isNotEmpty())
        assert(result == expected)
    }
}
