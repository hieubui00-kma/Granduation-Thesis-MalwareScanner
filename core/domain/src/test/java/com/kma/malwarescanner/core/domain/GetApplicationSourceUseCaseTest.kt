package com.kma.malwarescanner.core.domain

import com.kma.malwarescanner.core.domain.data.repository.ApplicationRepository
import com.kma.malwarescanner.core.domain.useCase.GetApplicationSourceUseCase
import io.mockk.MockKAnnotations
import io.mockk.coEvery
import io.mockk.impl.annotations.MockK
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.runTest
import org.junit.Before
import org.junit.Test
import java.io.File

@ExperimentalCoroutinesApi
class GetApplicationSourceUseCaseTest {

    @MockK
    private lateinit var applicationRepository: ApplicationRepository

    @Before
    fun setUp() {
        MockKAnnotations.init(this@GetApplicationSourceUseCaseTest)
    }

    @Test
    fun `When there is no data associated with the URI then return NULL`() = runTest {
        val getApplicationSourceUseCase = GetApplicationSourceUseCase(applicationRepository)

        coEvery { applicationRepository.getApplicationSource(uri = any()) }.returns(null)

        // Test...
        val result = getApplicationSourceUseCase(uri = "")

        assert(result == null)
    }

    @Test
    fun `When there is data associated with the URI then return file`() = runTest {
        val getApplicationSourceUseCase = GetApplicationSourceUseCase(applicationRepository)
        val mockData = File("")

        coEvery { applicationRepository.getApplicationSource(uri = any()) }.returns(mockData)

        // Test...
        val result = getApplicationSourceUseCase(uri = "")

        assert(result == mockData)
    }
}
