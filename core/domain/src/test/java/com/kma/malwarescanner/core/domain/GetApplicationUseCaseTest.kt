package com.kma.malwarescanner.core.domain

import com.kma.malwarescanner.core.domain.data.model.Application
import com.kma.malwarescanner.core.domain.data.repository.ApplicationRepository
import com.kma.malwarescanner.core.domain.useCase.GetApplicationUseCase
import io.mockk.MockKAnnotations
import io.mockk.coEvery
import io.mockk.impl.annotations.MockK
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.runTest
import org.junit.Before
import org.junit.Test

@ExperimentalCoroutinesApi
internal class GetApplicationUseCaseTest {
    @MockK
    private lateinit var applicationRepository: ApplicationRepository

    @Before
    fun setUp() {
        MockKAnnotations.init(this@GetApplicationUseCaseTest)
    }

    @Test
    fun `When not found installed application then return NULL`() = runTest {
        val getApplicationUseCase = GetApplicationUseCase(applicationRepository)

        coEvery { applicationRepository.getApplication(any()) }.returns(returnValue = null)

        // Test...
        val testCases = listOf("com.kma.malwarescanner", "com.kma.malwarescanner.develop")
        val result = testCases.map { packageName -> getApplicationUseCase(packageName) }

        assert(result.all { application -> application == null })
    }

    @Test
    fun `When found installed application then return application has same package name`() = runTest {
        val getApplicationUseCase = GetApplicationUseCase(applicationRepository)
        val mockData = mapOf(
            "com.kma.malwarescanner" to Application(
                name = "Malware Scanner",
                packageName = "com.kma.malwarescanner",
                version = "1.0.0",
                installDate = null,
                updatedDate = null,
                sourceDir = "",
                permissions = emptyList()
            ),
            "com.kma.malwarescanner.develop" to Application(
                name = "Malware Scanner Develop",
                packageName = "com.kma.malwarescanner.develop",
                version = "1.0.0",
                installDate = null,
                updatedDate = null,
                sourceDir = "",
                permissions = emptyList()
            )
        )

        mockData.forEach { data ->
            coEvery { applicationRepository.getApplication(data.key) }.returns(returnValue = data.value)
        }

        // Test...
        val testCases = listOf("com.kma.malwarescanner", "com.kma.malwarescanner.develop")
        val results = testCases.map { packageName -> getApplicationUseCase(packageName) }

        results.forEachIndexed { index, application ->
            assert(application?.packageName == testCases[index])
        }
    }
}
