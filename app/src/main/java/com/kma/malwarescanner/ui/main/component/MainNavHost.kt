package com.kma.malwarescanner.ui.main.component

import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.navigation.NavController
import androidx.navigation.NavHostController
import androidx.navigation.NavType
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import androidx.navigation.navArgument
import com.kma.malwarescanner.feature.applicationdetails.ui.ARGUMENT_SOURCE_DIR
import com.kma.malwarescanner.feature.applicationdetails.ui.ApplicationDetailsScreen
import com.kma.malwarescanner.feature.home.ui.HomeScreen

internal const val ROUTE_HOME = "home"
internal const val ROUTE_APPLICATION_DETAILS = "applications?sourceDir={$ARGUMENT_SOURCE_DIR}"

private const val ARGUMENT_HAS_CHANGED = "hasChanged"

@Composable
fun MainNavHost(
    modifier: Modifier = Modifier,
    navController: NavHostController = rememberNavController(),
    startDestination: String = ROUTE_HOME
) {
    NavHost(
        modifier = modifier,
        navController = navController,
        startDestination = startDestination
    ) {
        composable(route = ROUTE_HOME) { backStackEntry ->
            val hasChanged by backStackEntry
                .savedStateHandle
                .getStateFlow(key = ARGUMENT_HAS_CHANGED, initialValue = false)
                .collectAsState()

            HomeScreen(
                hasChanged = hasChanged,
                navigateToApplicationDetails = navController::navigateToApplicationDetails
            )
        }

        composable(
            route = ROUTE_APPLICATION_DETAILS,
            arguments = listOf(
                navArgument(name = ARGUMENT_SOURCE_DIR) { type = NavType.StringType }
            )
        ) {
            ApplicationDetailsScreen(onBackPressed = { isUninstalled ->
                navController.previousBackStackEntry
                    ?.savedStateHandle
                    ?.set(key = ARGUMENT_HAS_CHANGED, value = isUninstalled)
                navController.popBackStack()
            })
        }
    }
}

private fun NavController.navigateToApplicationDetails(sourceDir: String) {
    val route = ROUTE_APPLICATION_DETAILS.replace(oldValue = "{$ARGUMENT_SOURCE_DIR}", newValue = sourceDir)

    navigate(route = route)
}
