package com.kma.malwarescanner.ui.main.component

import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.navigation.NavController
import androidx.navigation.NavHostController
import androidx.navigation.NavType
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import androidx.navigation.navArgument
import com.kma.malwarescanner.feature.applicationdetails.ui.ARGUMENT_FROM_SHARED_STORAGE
import com.kma.malwarescanner.feature.applicationdetails.ui.ARGUMENT_SOURCE_DIR
import com.kma.malwarescanner.feature.applicationdetails.ui.ApplicationDetailsScreen
import com.kma.malwarescanner.feature.home.ui.HomeScreen
import com.kma.malwarescanner.feature.scan.ui.ScanScreen

internal const val ROUTE_HOME = "home"
internal const val ROUTE_APPLICATION_DETAILS = "applications" +
    "?sourceDir={$ARGUMENT_SOURCE_DIR}" +
    "&isFromSharedStorage={$ARGUMENT_FROM_SHARED_STORAGE}"
internal const val ROUTE_SCAN = "scan"

private const val ARGUMENT_HAS_CHANGED = "hasChanged"

@Composable
fun MainNavHost(
    modifier: Modifier = Modifier,
    navController: NavHostController = rememberNavController(),
    startDestination: String = ROUTE_HOME
) {
    NavHost(
        modifier = modifier,
        navController = navController,
        startDestination = startDestination
    ) {
        composable(route = ROUTE_HOME) { backStackEntry ->
            val hasChanged by backStackEntry
                .savedStateHandle
                .getStateFlow(key = ARGUMENT_HAS_CHANGED, initialValue = false)
                .collectAsState()

            HomeScreen(
                hasChanged = hasChanged,
                navigateToApplicationDetails = navController::navigateToApplicationDetails,
                navigateToScan = navController::navigateToScan
            )
        }

        composable(
            route = ROUTE_APPLICATION_DETAILS,
            arguments = listOf(
                navArgument(name = ARGUMENT_SOURCE_DIR) { type = NavType.StringType },
                navArgument(name = ARGUMENT_FROM_SHARED_STORAGE) { type = NavType.BoolType },
            )
        ) {
            ApplicationDetailsScreen(onBackPressed = { isUninstalled ->
                navController.previousBackStackEntry
                    ?.savedStateHandle
                    ?.set(key = ARGUMENT_HAS_CHANGED, value = isUninstalled)
                navController.popBackStack()
            })
        }

        composable(route = ROUTE_SCAN) {
            ScanScreen(
                onBackPressed = navController::popBackStack,
                navigateToApplicationDetails = { sourceDir ->
                    navController.navigateToApplicationDetails(
                        sourceDir = sourceDir,
                        isFromSharedStorage = true
                    )
                }
            )
        }
    }
}

private fun NavController.navigateToApplicationDetails(sourceDir: String, isFromSharedStorage: Boolean = false) {
    val route = ROUTE_APPLICATION_DETAILS
        .replace(oldValue = "{$ARGUMENT_SOURCE_DIR}", newValue = sourceDir)
        .replace(oldValue = "{$ARGUMENT_FROM_SHARED_STORAGE}", newValue = isFromSharedStorage.toString())

    navigate(route = route)
}

private fun NavController.navigateToScan() {
    navigate(route = ROUTE_SCAN)
}
