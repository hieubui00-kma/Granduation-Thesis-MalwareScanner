package com.kma.malwarescanner.ui.main

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.kma.malwarescanner.core.domain.useCase.UpgradeTensorModelUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class MainViewModel @Inject constructor(
    private val upgradeTensorModelUseCase: UpgradeTensorModelUseCase
) : ViewModel() {
    private val _isUpgrading = MutableStateFlow(value = false)

    val isUpgrading: StateFlow<Boolean>
        get() = _isUpgrading

    init {
        upgradeTensorModel()
    }

    private fun upgradeTensorModel() {
        viewModelScope.launch {
            _isUpgrading.tryEmit(value = true)
            upgradeTensorModelUseCase()
            _isUpgrading.tryEmit(value = false)
        }
    }
}
